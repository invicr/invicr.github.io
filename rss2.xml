<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Modern Developer의 개발 일지</title>
    <link>https://invicr.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 31 Mar 2020 13:31:49 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[Spring] @NoArgsConstructor, @RequiredArgsConstructor, @AllArgsConstructor</title>
      <link>https://invicr.github.io/2020/03/31/Spring-NoArgsConstructor-RequiredArgsConstructor-AllArgsConstructor/</link>
      <guid>https://invicr.github.io/2020/03/31/Spring-NoArgsConstructor-RequiredArgsConstructor-AllArgsConstructor/</guid>
      <pubDate>Tue, 31 Mar 2020 13:12:15 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;lombok 라이브러리를 사용하면 &lt;code&gt;getter&lt;/code&gt;, &lt;code&gt;setter&lt;/code&gt; 등을 어노테이션으로 편하게 사용할 수 있다. 그 중에 생성자를 자동으로 생성해주는 어노테이션에 소개하고자 한다.&lt;/p&gt;
&lt;figure cl
        
      
      </description>
      
      <content:encoded><![CDATA[<p>lombok 라이브러리를 사용하면 <code>getter</code>, <code>setter</code> 등을 어노테이션으로 편하게 사용할 수 있다. 그 중에 생성자를 자동으로 생성해주는 어노테이션에 소개하고자 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Long studentId;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>구분</th><th>설명</th><th>예</th></tr></thead><tbody><tr><td>NoArgsConstructor</td><td>파라미터가 없는 기본 생성자를 생성</td><td><code>Java Student std = new Student();</code></td></tr><tr><td>RequiredArgsConstructor</td><td><code>final</code>이나 <code>@NonNull</code>인 필드 값만 파라미터로 받는 생성자</td><td><code>Java Student std = new Student(1L);</code></td></tr><tr><td>AllArgsConstructor</td><td>모든 필드 값을 파라미터로 받는 생성자 생성</td><td><code>Java Student std = new Student(1L, &quot;홍길동&quot;, 20);</code></td></tr></tbody></table>]]></content:encoded>
      
      <comments>https://invicr.github.io/2020/03/31/Spring-NoArgsConstructor-RequiredArgsConstructor-AllArgsConstructor/#disqus_thread</comments>
    </item>
    
    <item>
      <title>== vs equals()</title>
      <link>https://invicr.github.io/2020/03/06/equals/</link>
      <guid>https://invicr.github.io/2020/03/06/equals/</guid>
      <pubDate>Fri, 06 Mar 2020 12:13:40 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Java에서 &lt;code&gt;equals()&lt;/code&gt;와 &lt;code&gt;==&lt;/code&gt;는 객체 혹은 내용을 비교할 때 사용하곤 한다.&lt;br&gt;이 둘은 어떤 차이점이 있을까?&lt;/p&gt;
&lt;h3 id=&quot;동일성-비교&quot;&gt;&lt;a href=&quot;#동일성-비교&quot; class=
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Java에서 <code>equals()</code>와 <code>==</code>는 객체 혹은 내용을 비교할 때 사용하곤 한다.<br>이 둘은 어떤 차이점이 있을까?</p><h3 id="동일성-비교"><a href="#동일성-비교" class="headerlink" title="== : 동일성 비교"></a>== : 동일성 비교</h3><ul><li>Primitive Type(int, float, double, long 등)일 경우에는 값이 같은 지 확인</li><li>그 외에 객체나 Reference Type일 경우에는 주소가 같은지 확인</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//리터럴 생성</span></span><br><span class="line">String str1 = <span class="string">"hi"</span>;</span><br><span class="line">String str2 = <span class="string">"hi"</span>;</span><br><span class="line">System.out.println(str1 == str2);   <span class="comment">//true</span></span><br><span class="line"><span class="comment">//new를 이용한 생성</span></span><br><span class="line">String str3 = <span class="keyword">new</span> String(<span class="string">"hi"</span>);</span><br><span class="line">String str4 = <span class="keyword">new</span> String(<span class="string">"hi"</span>);</span><br><span class="line">System.out.println(str3 == str4);   <span class="comment">//false</span></span><br><span class="line">System.out.println(str1 == str3);   <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>String의 경우는 조금 특별한데, 리터럴 생성을 하면 String Constant Pool 이라는 영역에 할당되고, new 를 이용한 생성을 하면 Heap에 할당된다.<br>리터럴로 생성한 문자가 같을 경우 메모리 상에서 같은 주소를 바라보게 되고,<br>new로 생성할 경우 생성 할 때마다 새로운 인스턴스를 생성하여 각각 다른 주소 공간에 위치하게 된다.<br>그렇기 때문에</p><ul><li><code>str1 == str2</code> : 리터럴로 생성되어 같은 주소를 바라보고 있기 때문에 <strong>true</strong></li><li><code>str3 == str4</code> : new로 생성되어 각각 다른 주소에 생성되기 때문에 <strong>false</strong></li><li><code>str1 == str3</code> : 리터럴과 new로 생성되어 서로 다른 주소에 위치하기 때문에 <strong>false</strong><br>결론적으로 <code>==</code> 두 객체가 같은 주소를 가르킬 때 true를 반환한다.</li></ul><h3 id="equals-동등성-비교"><a href="#equals-동등성-비교" class="headerlink" title="equals() : 동등성 비교"></a>equals() : 동등성 비교</h3><ul><li>Primitive Type(int, float, double, long 등)일 경우에는 값이 같은 지 확인</li><li>그 외 객체나 Reference Type일 경우에는 주소가 같은지 확인</li><li><code>==</code>과 유사하지만 다른 점은 완전히 같은 객체(같은 주소)를 가리키지 않아도 <code>equals()</code> 메서드 오버라이딩을 통해서 true로 만들 수 있다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">"hi"</span>;</span><br><span class="line">String str2 = <span class="string">"hi"</span>;</span><br><span class="line">System.out.println(str1.equals(str2));   <span class="comment">//true</span></span><br><span class="line">String str3 = <span class="keyword">new</span> String(<span class="string">"hi"</span>);</span><br><span class="line">String str4 = <span class="keyword">new</span> String(<span class="string">"hi"</span>);</span><br><span class="line">System.out.println(str3.equals(str4));   <span class="comment">//true</span></span><br><span class="line">System.out.println(str1.equals(str3));   <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>String에는 이미 <code>equals()</code> 메소드가 오버라이딩 되어 있는 상태이기 때문에 주소값이 다르더라도 내용이 같다면 true를 반환하고 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Student s1 = <span class="keyword">new</span> Student(<span class="string">"1"</span>);</span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">"1"</span>);</span><br><span class="line">System.out.println(s1.equals(s2));  <span class="comment">//false</span></span><br><span class="line">System.out.println(s1.hashCode());  <span class="comment">//1634198</span></span><br><span class="line">System.out.println(s2.hashCode());  <span class="comment">//110456297</span></span><br></pre></td></tr></table></figure><p>Student 객체를 만든 뒤 동일한 id 값을 부여한 후 비교하면 주소 값이 다르기 때문에 false를 반환한다. <strong>(hash 값도 다르다.)</strong> true로 만들기 위해서는 <code>equals()</code>와 <code>hashcode()</code> 메소드를 오버라이딩 해준다. IDE에서 자동으로 생성해주나, 조건에 따라 수정하여 사용하도록 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Student)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Student student = (Student) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(id, student.id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 생성자, getter, setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이후 코드를 재실행하면 결과 값은 true가 나오고 두 객체 모두 동일한 hash 값을 가지게 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Student s1 = <span class="keyword">new</span> Student(<span class="string">"1"</span>);</span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">"1"</span>);</span><br><span class="line">System.out.println(s1.equals(s2));  <span class="comment">//true</span></span><br><span class="line">System.out.println(s1.hashCode());  <span class="comment">//80</span></span><br><span class="line">System.out.println(s2.hashCode());  <span class="comment">//80</span></span><br></pre></td></tr></table></figure><p><code>hashcode()</code> 왜 오버라이딩하는지 궁금해 할 것이다. 우리도 모르는 사이에 hash값을 쓰는 곳이 많다. 예를 들면 <code>hashSet</code>이나 <code>hashmap</code> 같은 컬렉션 들이다. <code>equals()</code>만 오버라이딩하고 <code>hashcode()</code>는 하지 않았을 경우엔 같은 객체라 할지라도 <code>hashcode()</code> 값이 다르게 나올 수 있는데, 이때는 다른 객체로 인식하기 때문이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Student&gt; stu = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">stu.add(s1);</span><br><span class="line">stu.add(s2);</span><br><span class="line">System.out.println(stu.size());</span><br><span class="line"><span class="comment">// hashcode() 오버라이딩 한 경우 : 1</span></span><br><span class="line"><span class="comment">// hashcode() 오버라이딩 하지 않은 경우 : 2</span></span><br></pre></td></tr></table></figure><p><code>hashcode()</code>를 오버라이딩 한 경우 hashcode 값이 같으므로 같은 객체로 인식하여 1이 나온다. (Set은 중복 허용 X) 반면 오버라이딩을 하지 않았을 경우 hashcode 값이 다르므로 다른 객체로 인식하기 때문에 size 값은 2가 된다.<br>그러므로 <code>equals()</code>를 오버라이딩 할 경우 반드시 <code>hashcode()</code>도 오버라이딩 하여 혹시나 모를 불상사를 예방하는 것이 좋다.</p><h3 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h3><ul><li><code>==</code>는 객체 간의 <strong>동일성</strong>을 판단하기 위해 사용한다. <strong>동일성</strong>은 두 개의 객체가 완전히 같을 경우를 의미 한다.</li><li><code>equals()</code>는 객체 간의 <strong>동등성</strong>을 판단하기 위해 사용한다. <strong>동등성</strong>은 두 개의 객체가 같은 내용을 가질 경우를 의미 한다.</li><li><code>==</code> 연산자는 주소 값의 비교, <code>equals()</code>는 내용을 비교 한다.</li><li><code>equals()</code>를 오버라이딩 할 경우 반드시 <code>hashcode()</code>도 오버라이딩 하여야 한다.</li><li><code>equals()</code>로 true가 나온 경우 <code>hashcode()</code>의 값이 동일 해야 한다. 그러나 <code>hashcode()</code>가 동일하다고 해서 반드시 같은 객체는 아니다.</li></ul><h3 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h3><p><a href="https://jeong-pro.tistory.com/172" rel="external nofollow noopener noreferrer" target="_blank">https://jeong-pro.tistory.com/172</a><br><a href="https://joont.tistory.com/143" rel="external nofollow noopener noreferrer" target="_blank">https://joont.tistory.com/143</a><br><a href="https://madplay.github.io/post/java-string-literal-vs-string-object" rel="external nofollow noopener noreferrer" target="_blank">https://madplay.github.io/post/java-string-literal-vs-string-object</a></p>]]></content:encoded>
      
      <comments>https://invicr.github.io/2020/03/06/equals/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Comparable vs Comparator</title>
      <link>https://invicr.github.io/2020/03/04/comparable-vs-comparator/</link>
      <guid>https://invicr.github.io/2020/03/04/comparable-vs-comparator/</guid>
      <pubDate>Wed, 04 Mar 2020 13:45:23 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;1-개요&quot;&gt;&lt;a href=&quot;#1-개요&quot; class=&quot;headerlink&quot; title=&quot;1.개요&quot;&gt;&lt;/a&gt;1.개요&lt;/h3&gt;&lt;p&gt;자바 객체를 비교하기 위해서 &lt;code&gt;Comparable&lt;/code&gt; 혹은 &lt;code&gt;Comparator&lt;/c
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="1-개요"><a href="#1-개요" class="headerlink" title="1.개요"></a>1.개요</h3><p>자바 객체를 비교하기 위해서 <code>Comparable</code> 혹은 <code>Comparator</code>라는 인터페이스를 사용하게 된다. 두 인터페이스의 차이점을 예제로 살펴보도록 하자.</p><h3 id="2-예제로-살펴보기"><a href="#2-예제로-살펴보기" class="headerlink" title="2.예제로 살펴보기"></a>2.예제로 살펴보기</h3><p>Player 클래스 만들기</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ranking;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 생성자 및 getter, setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>메인 메소드에서 footballTeam을 만들고 정렬을 시도하자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Player&gt; footballTeam = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Player player1 = <span class="keyword">new</span> Player(<span class="number">59</span>, <span class="string">"John"</span>, <span class="number">20</span>);</span><br><span class="line">    Player player2 = <span class="keyword">new</span> Player(<span class="number">67</span>, <span class="string">"Roger"</span>, <span class="number">22</span>);</span><br><span class="line">    Player player3 = <span class="keyword">new</span> Player(<span class="number">45</span>, <span class="string">"Steven"</span>, <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">    footballTeam.add(player1);</span><br><span class="line">    footballTeam.add(player2);</span><br><span class="line">    footballTeam.add(player3);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"Before Sorting : "</span> + footballTeam);</span><br><span class="line">    Collections.sort(footballTeam);</span><br><span class="line">    System.out.println(<span class="string">"After Sorting : "</span> + footballTeam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아래와 같은 에러가 발생한다. 개인적인 생각으로는 footballTeam을 정렬하고 싶지만, 정렬해야하는 조건을 별도로 지정해주지 않았기 때문에 ranking, name, age 중 어떤 조건으로 정렬해야하는지 알지 못하기 때문에 발생하는 에러이지 않을까하는 생각이 든다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Error:(<span class="number">17</span>, <span class="number">20</span>) java: <span class="function">no suitable method found <span class="keyword">for</span> <span class="title">sort</span><span class="params">(java.util.List&lt;Player&gt;)</span></span></span><br><span class="line"><span class="function">    method java.util.Collections.&lt;T&gt;<span class="title">sort</span><span class="params">(java.util.List&lt;T&gt;)</span> is not applicable</span></span><br><span class="line"><span class="function">      <span class="params">(inference variable T has incompatible bounds</span></span></span><br><span class="line"><span class="function"><span class="params">        equality constraints: Player</span></span></span><br><span class="line"><span class="function"><span class="params">        upper bounds: java.lang.Comparable&lt;? <span class="keyword">super</span> T&gt;)</span></span></span><br><span class="line"><span class="function">    method java.util.Collections.&lt;T&gt;<span class="title">sort</span><span class="params">(java.util.List&lt;T&gt;,java.util.Comparator&lt;? <span class="keyword">super</span> T&gt;)</span> is not applicable</span></span><br><span class="line"><span class="function">      <span class="params">(cannot infer type-variable(s)</span> T</span></span><br><span class="line"><span class="function">        <span class="params">(actual and formal argument lists differ in length)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="3-Comparable"><a href="#3-Comparable" class="headerlink" title="3.Comparable"></a>3.Comparable</h3><p><code>Comparable</code>는 객체 간의 일반적인 정렬이 필요할 때, <code>Comparable</code> 인터페이스를 확장해서 정렬의 기준을 정의하는 <code>compareTo()</code> 메서드를 오버라이딩하여 구현한다. (객체 클래스에 확장하여 사용)<br>아래 코드에서는 ranking 기준으로 정렬하는 코드이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Player</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ranking;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 생성자 및 getter, setter, toString</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Player otherPlayer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.getRanking() - otherPlayer.getRanking());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>compareTo()</code> 메소드는 구현된 객체와 매개변수로 넘어온 객체를 비교하며, 비교에 따른 결과 값을 return 하게 된다. 객체와 매개변수 객체를 비교 하였을 때 작으면 음수, 같으면 0, 크면 양수를 반환한다.</p><p>main 함수를 다시 실행하면 아래와 같이 ranking을 기준으로 정렬된 결과가 출력된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Before Sorting : [Player&#123;ranking=<span class="number">59</span>, name=<span class="string">'John'</span>, age=<span class="number">20</span>&#125;, Player&#123;ranking=<span class="number">67</span>, name=<span class="string">'Roger'</span>, age=<span class="number">22</span>&#125;, Player&#123;ranking=<span class="number">45</span>, name=<span class="string">'Steven'</span>, age=<span class="number">24</span>&#125;]</span><br><span class="line">After Sorting : [Player&#123;ranking=<span class="number">45</span>, name=<span class="string">'Steven'</span>, age=<span class="number">24</span>&#125;, Player&#123;ranking=<span class="number">59</span>, name=<span class="string">'John'</span>, age=<span class="number">20</span>&#125;, Player&#123;ranking=<span class="number">67</span>, name=<span class="string">'Roger'</span>, age=<span class="number">22</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="4-Comparator"><a href="#4-Comparator" class="headerlink" title="4.Comparator"></a>4.Comparator</h3><p><code>Comparator</code>는 객체 간의 특정한 정렬이 필요할 때, <code>Comparator</code> 인터페이스를 확장해서 특정 기준을 정의하는 <code>compare()</code> 메소드를 오버라이딩하여 구현한다.</p><p>아래는 ranking과 age로 정렬하는 별도의 구현 클래스이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerRankingComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Player</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Player firstPlayer, Player secondPlayer)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> (firstPlayer.getRanking() - secondPlayer.getRanking());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerAgeComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Player</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Player firstPlayer, Player secondPlayer)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> (firstPlayer.getAge() - secondPlayer.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아래와 같이 정렬 기준 클래스를 호출하여 정렬에 이용할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PlayerRankingComparator playerComparator = <span class="keyword">new</span> PlayerRankingComparator();</span><br><span class="line">Collections.sort(footballTeam, playerComparator);</span><br><span class="line"></span><br><span class="line">PlayerAgeComparator playerComparator = <span class="keyword">new</span> PlayerAgeComparator();</span><br><span class="line">Collections.sort(footballTeam, playerComparator);</span><br></pre></td></tr></table></figure><h3 id="5-다중-조건-정렬"><a href="#5-다중-조건-정렬" class="headerlink" title="5.다중 조건 정렬"></a>5.다중 조건 정렬</h3><p>위에서는 한가지 정렬 조건만을 이용해서 정렬을 했었다. 여러 개의 정렬 조건을 이용하고 싶다면, 자바8 이상에서는 lambda expression을 사용하면 쉽게 다중 조건 정렬을 할 수 있다.<br>아래 코드는 ranking 오름차순 정렬 후 age로 오름차순 정렬하는 코드이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">footballTeam.sort(Comparator.comparing(Player::getRanking).thenComparing(Player::getAge));</span><br></pre></td></tr></table></figure><h3 id="6-정리"><a href="#6-정리" class="headerlink" title="6.정리"></a>6.정리</h3><p>Primitive Type나 Reference Type은 기본적으로 Java에서 제공해주는 Object의 경우는 기본적으로 <code>Comparable</code> 인터페이스를 구현하고 있어서 <code>Arrays.sort</code> 같은 함수를 사용하면 자동으로 자연적인 정렬(오름차순)이 가능하다. 하지만 별도로 만든 객체를 sort 메소드를 통해서 정렬하거나, 혹은 특정한 조건을 기반으로 정렬하는 경우는 반드시 <code>Comparable</code> 인터페이스를 구현하여야 직접 정렬 기준을 구현하여야 한다.<br><code>Comparator</code>은 Reference Type을 내가 원하는대로 정렬하고 싶을때나 기존에 구현된 <code>Comparable</code>의 정렬과는 다른 결과를 얻고 싶을 때 사용한다.</p><h3 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h3><p><a href="https://www.baeldung.com/java-comparator-comparable" rel="external nofollow noopener noreferrer" target="_blank">https://www.baeldung.com/java-comparator-comparable</a><br><a href="https://dev-daddy.tistory.com/23" rel="external nofollow noopener noreferrer" target="_blank">https://dev-daddy.tistory.com/23</a><br><a href="https://jeong-pro.tistory.com/173" rel="external nofollow noopener noreferrer" target="_blank">https://jeong-pro.tistory.com/173</a><br><a href="https://javaplant.tistory.com/15" rel="external nofollow noopener noreferrer" target="_blank">https://javaplant.tistory.com/15</a></p>]]></content:encoded>
      
      <comments>https://invicr.github.io/2020/03/04/comparable-vs-comparator/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[IntelliJ] Import  설정</title>
      <link>https://invicr.github.io/2020/03/03/IntelliJ-Import-%EC%84%A4%EC%A0%95/</link>
      <guid>https://invicr.github.io/2020/03/03/IntelliJ-Import-%EC%84%A4%EC%A0%95/</guid>
      <pubDate>Tue, 03 Mar 2020 10:37:02 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;IntelliJ에서는 import 구문이 5개 이상 추가 되면 *로 표시가 된다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>IntelliJ에서는 import 구문이 5개 이상 추가 되면 *로 표시가 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br></pre></td></tr></table></figure><p>*로 표시되면, 어떤 패키지 경로를 참조하고 있는지 알기 어렵기 때문에, 현재 사용중인 모든 패키지 경로를 표시해주는 것이 좋다.</p><p>설정을 변경하기 위해서는 아래 메뉴로 들어가서 설정을 변경한다.</p><blockquote><p>Preferences &gt; Editor &gt; Code Style &gt; Java  </p></blockquote><p><img src="import.png" alt></p><p>빨간박스 안에 들어 있는 숫자를 <code>999</code>로 변경하고 적용하면 아래와 같이 import 구문이 변경된다. (IntelliJ에 Auto Import가 설정되어 있지 않으면, import 작업을 별도로 해주어야 한다.)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://invicr.github.io/2020/03/03/IntelliJ-Import-%EC%84%A4%EC%A0%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HashMap time complexity</title>
      <link>https://invicr.github.io/2020/03/03/Hashmap-time-complexity/</link>
      <guid>https://invicr.github.io/2020/03/03/Hashmap-time-complexity/</guid>
      <pubDate>Tue, 03 Mar 2020 10:16:42 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;HashMap이란&quot;&gt;&lt;a href=&quot;#HashMap이란&quot; class=&quot;headerlink&quot; title=&quot;HashMap이란?&quot;&gt;&lt;/a&gt;HashMap이란?&lt;/h3&gt;&lt;p&gt;Key, Value를 하나의 데이터(Entry)로 저장하는 Map의 구현
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="HashMap이란"><a href="#HashMap이란" class="headerlink" title="HashMap이란?"></a>HashMap이란?</h3><p>Key, Value를 하나의 데이터(Entry)로 저장하는 Map의 구현제 중 하나이다.</p><p>HashMap의 특징은 아래와 같다.</p><ul><li>null key와 null value를 모두 허용한다.</li><li>내부적으로 데이터에 접근할 때 동기화를 보장하지 않는다.</li><li>데이터의 순서를 보장하지 않는다.</li><li>중복된 key값을 허용하진 않지만, 중복된 값은 가질 수 있다.</li></ul><h3 id="HashMap-구조"><a href="#HashMap-구조" class="headerlink" title="HashMap 구조"></a>HashMap 구조</h3><p>HashMap은 key를 hash 함수에 넣어 나온 value를 bucket의 특정 인덱스에 저장한다. H(k) = k mod M 의 계산식을 통해서 버킷의 크기보다 작은 인덱스에 저장을 하도록 한다. (1/M확률로 충돌이 발생하게 된다.)</p><p><img src="https://codenuclear.com/wp-content/uploads/2017/11/bucket_entries.jpg" alt></p><center>이미지 출처 : https://codenuclear.com/difference-between-hashmap-hashtable/</center><h3 id="Time-complexity"><a href="#Time-complexity" class="headerlink" title="Time complexity"></a>Time complexity</h3><p>key는 고유하며 해시 함수의 결과로 나온 해시에 매칭되는 value를 찾으면 되기 때문에 시간 복잡도는 O(1)이다.<br>최악의 경우는 해시 충돌로 인해 모든 bucket의 value들을 찾아 봐야 하는 경우도 있기 때문에 시간 복잡도는 O(n)이다.</p>]]></content:encoded>
      
      <comments>https://invicr.github.io/2020/03/03/Hashmap-time-complexity/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Java] ConcurrentModificationException</title>
      <link>https://invicr.github.io/2020/02/17/Java-ConcurrentModificationException/</link>
      <guid>https://invicr.github.io/2020/02/17/Java-ConcurrentModificationException/</guid>
      <pubDate>Mon, 17 Feb 2020 13:09:44 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;ConcurrentModificationException-해결-하기&quot;&gt;&lt;a href=&quot;#ConcurrentModificationException-해결-하기&quot; class=&quot;headerlink&quot; title=&quot;ConcurrentModifica
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="ConcurrentModificationException-해결-하기"><a href="#ConcurrentModificationException-해결-하기" class="headerlink" title="ConcurrentModificationException 해결 하기"></a>ConcurrentModificationException 해결 하기</h3><p>List에서 특정 조건에 해당하는 원소만 삭제 해야 할 경우가 있다.<br>특정 숫자를 지워야 해야 한다면 아래와 같은 코드를 떠올릴 수 있을 것이다.</p><div class="colorscripter-code" style="font-size:12px;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important;overflow:auto"><table class="colorscripter-code-table" style="margin:0;padding:0;border:none;background-color:#fafafa;border-radius:4px;" cellspacing="0" cellpadding="0"><tr><td style="padding:6px;border-right:2px solid #e5e5e5"><div style="margin:0;padding:0;word-break:normal;text-align:right;color:#666;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%"><div style="line-height:130%">1</div><div style="line-height:130%">2</div><div style="line-height:130%">3</div><div style="line-height:130%">4</div><div style="line-height:130%">5</div><div style="line-height:130%">6</div><div style="line-height:130%">7</div><div style="line-height:130%">8</div><div style="line-height:130%">9</div></div></td><td style="padding:6px 0;text-align:left"><div style="margin:0;padding:0;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%"><div style="padding:0 6px; white-space:pre; line-height:130%">List<span style="color:#0086b3"></span><span style="color:#a71d5d">&lt;</span>Integer<span style="color:#0086b3"></span><span style="color:#a71d5d">&gt;</span>&nbsp;numbers&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">=</span>&nbsp;<span style="color:#a71d5d">new</span>&nbsp;ArrayList<span style="color:#0086b3"></span><span style="color:#a71d5d">&lt;</span><span style="color:#0086b3"></span><span style="color:#a71d5d">&gt;</span>();</div><div style="padding:0 6px; white-space:pre; line-height:130%"><span style="color:#999999">//[0,&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;6,&nbsp;7,&nbsp;8,&nbsp;9]</span></div><div style="padding:0 6px; white-space:pre; line-height:130%">numbers.addAll(Arrays.asList(<span style="color:#0099cc">0</span>,<span style="color:#0099cc">1</span>,<span style="color:#0099cc">2</span>,<span style="color:#0099cc">3</span>,<span style="color:#0099cc">4</span>,<span style="color:#0099cc">5</span>,<span style="color:#0099cc">6</span>,<span style="color:#0099cc">7</span>,<span style="color:#0099cc">8</span>,<span style="color:#0099cc">9</span>));</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;</div><div style="padding:0 6px; white-space:pre; line-height:130%"><span style="color:#a71d5d">for</span>&nbsp;(Integer&nbsp;number&nbsp;:&nbsp;numbers){</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#a71d5d">if</span>(number&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">=</span><span style="color:#0086b3"></span><span style="color:#a71d5d">=</span>&nbsp;<span style="color:#0099cc">5</span>){</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numbers.remove(number);</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;}</div><div style="padding:0 6px; white-space:pre; line-height:130%">}</div></div><div style="text-align:right;margin-top:-13px;margin-right:5px;font-size:9px;font-style:italic"><a href="http://colorscripter.com/info#e" target="_blank" style="color:#e5e5e5text-decoration:none" rel="external nofollow noopener noreferrer">Colored by Color Scripter</a></div></td><td style="vertical-align:bottom;padding:0 2px 4px 0"><a href="http://colorscripter.com/info#e" target="_blank" style="text-decoration:none;color:white" rel="external nofollow noopener noreferrer"><span style="font-size:9px;word-break:normal;background-color:#e5e5e5;color:white;border-radius:10px;padding:1px">cs</span></a></td></tr></table></div><br>해당 코드를 실행해보면 <code>ConcurrentModificationException</code>이 발생한다.<div class="colorscripter-code" style="font-size:12px;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important;overflow:auto"><table class="colorscripter-code-table" style="margin:0;padding:0;border:none;background-color:#fafafa;border-radius:4px;" cellspacing="0" cellpadding="0"><tr><td style="padding:6px;border-right:2px solid #e5e5e5"><div style="margin:0;padding:0;word-break:normal;text-align:right;color:#666;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%"><div style="line-height:130%">1</div><div style="line-height:130%">2</div><div style="line-height:130%">3</div><div style="line-height:130%">4</div></div></td><td style="padding:6px 0;text-align:left"><div style="margin:0;padding:0;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%"><div style="padding:0 6px; white-space:pre; line-height:130%">Exception&nbsp;<span style="color:#066de2">in</span>&nbsp;thread&nbsp;<span style="color:#63a35c">"main"</span>&nbsp;java.util.ConcurrentModificationException</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;java.base<span style="color:#0086b3"></span><span style="color:#a71d5d">/</span>java.util.ArrayList$Itr.checkForComodification(ArrayList.java:<span style="color:#0099cc">937</span>)</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;java.base<span style="color:#0086b3"></span><span style="color:#a71d5d">/</span>java.util.ArrayList$Itr.next(ArrayList.java:<span style="color:#0099cc">891</span>)</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;Main.main(Main.java:<span style="color:#0099cc">12</span>)</div></div><div style="text-align:right;margin-top:-13px;margin-right:5px;font-size:9px;font-style:italic"><a href="http://colorscripter.com/info#e" target="_blank" style="color:#e5e5e5text-decoration:none" rel="external nofollow noopener noreferrer">Colored by Color Scripter</a></div></td><td style="vertical-align:bottom;padding:0 2px 4px 0"><a href="http://colorscripter.com/info#e" target="_blank" style="text-decoration:none;color:white" rel="external nofollow noopener noreferrer"><span style="font-size:9px;word-break:normal;background-color:#e5e5e5;color:white;border-radius:10px;padding:1px">cs</span></a></td></tr></table></div><br>해당 Exception이 IndexOutOfBoundsException이 발생하지 않고, <code>ConcurrentModificationException</code>이 발생하는 이유는 Enhanced for loop에서 Iterator 방식을 사용하여 List를 순회하고 있기 때문이다.<br><h3 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h3><h4 id="1-Iterator"><a href="#1-Iterator" class="headerlink" title="(1) Iterator"></a>(1) Iterator</h4><p><code>Iterator</code>의 <code>remove</code> 메소드를 사용하면, 컬렉션을 순회하면서 안전하게 원소를 삭제할 수 있는 방법이나 Multi-Thread 환경에서 성능상의 이슈가 발생할 수 있다.</p><div class="colorscripter-code" style="font-size:12px;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important;overflow:auto"><table class="colorscripter-code-table" style="margin:0;padding:0;border:none;background-color:#fafafa;border-radius:4px;" cellspacing="0" cellpadding="0"><tr><td style="padding:6px;border-right:2px solid #e5e5e5"><div style="margin:0;padding:0;word-break:normal;text-align:right;color:#666;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%"><div style="line-height:130%">1</div><div style="line-height:130%">2</div><div style="line-height:130%">3</div><div style="line-height:130%">4</div><div style="line-height:130%">5</div><div style="line-height:130%">6</div><div style="line-height:130%">7</div></div></td><td style="padding:6px 0;text-align:left"><div style="margin:0;padding:0;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%"><div style="padding:0 6px; white-space:pre; line-height:130%">Iterator<span style="color:#0086b3"></span><span style="color:#a71d5d">&lt;</span>Integer<span style="color:#0086b3"></span><span style="color:#a71d5d">&gt;</span>&nbsp;iter&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">=</span>&nbsp;numbers.iterator();</div><div style="padding:0 6px; white-space:pre; line-height:130%"><span style="color:#a71d5d">while</span>(iter.hasNext()){</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;Integer&nbsp;number&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">=</span>&nbsp;iter.next();</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#a71d5d">if</span>(number&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">=</span><span style="color:#0086b3"></span><span style="color:#a71d5d">=</span>&nbsp;<span style="color:#0099cc">5</span>){</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iter.remove();</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;}</div><div style="padding:0 6px; white-space:pre; line-height:130%">}</div></div><div style="text-align:right;margin-top:-13px;margin-right:5px;font-size:9px;font-style:italic"><a href="http://colorscripter.com/info#e" target="_blank" style="color:#e5e5e5text-decoration:none" rel="external nofollow noopener noreferrer">Colored by Color Scripter</a></div></td><td style="vertical-align:bottom;padding:0 2px 4px 0"><a href="http://colorscripter.com/info#e" target="_blank" style="text-decoration:none;color:white" rel="external nofollow noopener noreferrer"><span style="font-size:9px;word-break:normal;background-color:#e5e5e5;color:white;border-radius:10px;padding:1px">cs</span></a></td></tr></table></div><h4 id="2-removeIf"><a href="#2-removeIf" class="headerlink" title="(2) removeIf"></a>(2) removeIf</h4><p><code>Collection</code> 인터페이스의 <code>removeIf</code> 메소드를 사용할 수 있다.</p><div class="colorscripter-code" style="font-size:12px;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important;overflow:auto"><table class="colorscripter-code-table" style="margin:0;padding:0;border:none;background-color:#fafafa;border-radius:4px;" cellspacing="0" cellpadding="0"><tr><td style="padding:6px;border-right:2px solid #e5e5e5"><div style="margin:0;padding:0;word-break:normal;text-align:right;color:#666;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%"><div style="line-height:130%">1</div></div></td><td style="padding:6px 0;text-align:left"><div style="margin:0;padding:0;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%"><div style="padding:0 6px; white-space:pre; line-height:130%">numbers.removeIf(number&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">-</span><span style="color:#0086b3"></span><span style="color:#a71d5d">&gt;</span>&nbsp;number&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">=</span><span style="color:#0086b3"></span><span style="color:#a71d5d">=</span>&nbsp;<span style="color:#0099cc">2</span>);</div></div></td><td style="vertical-align:bottom;padding:0 2px 4px 0"><a href="http://colorscripter.com/info#e" target="_blank" style="text-decoration:none;color:white" rel="external nofollow noopener noreferrer"><span style="font-size:9px;word-break:normal;background-color:#e5e5e5;color:white;border-radius:10px;padding:1px">cs</span></a></td></tr></table></div><h4 id="3-Stream의-filter"><a href="#3-Stream의-filter" class="headerlink" title="(3) Stream의 filter"></a>(3) Stream의 filter</h4><p>자바 8에서 Stream의 <code>filter</code>를 이용하여 원하는 값을 처리하는 방법을 사용할 수 있다.</p><div class="colorscripter-code" style="font-size:12px;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important;overflow:auto"><table class="colorscripter-code-table" style="margin:0;padding:0;border:none;background-color:#fafafa;border-radius:4px;" cellspacing="0" cellpadding="0"><tr><td style="padding:6px;border-right:2px solid #e5e5e5"><div style="margin:0;padding:0;word-break:normal;text-align:right;color:#666;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%"><div style="line-height:130%">1</div><div style="line-height:130%">2</div><div style="line-height:130%">3</div><div style="line-height:130%">4</div><div style="line-height:130%">5</div><div style="line-height:130%">6</div><div style="line-height:130%">7</div><div style="line-height:130%">8</div></div></td><td style="padding:6px 0;text-align:left"><div style="margin:0;padding:0;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%"><div style="padding:0 6px; white-space:pre; line-height:130%">List<span style="color:#0086b3"></span><span style="color:#a71d5d">&lt;</span>Integer<span style="color:#0086b3"></span><span style="color:#a71d5d">&gt;</span>&nbsp;temp&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">=</span>&nbsp;number</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;.stream()</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;.filter(number&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">-</span><span style="color:#0086b3"></span><span style="color:#a71d5d">&gt;</span>&nbsp;{</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#a71d5d">if</span>((number&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">=</span><span style="color:#0086b3"></span><span style="color:#a71d5d">=</span>&nbsp;<span style="color:#0099cc">5</span>)){</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#a71d5d">return</span>&nbsp;<span style="color:#0099cc">false</span>;</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#a71d5d">return</span>&nbsp;<span style="color:#0099cc">true</span>;</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;}).collect(Collectors.toList());</div></div></td><td style="vertical-align:bottom;padding:0 2px 4px 0"><a href="http://colorscripter.com/info#e" target="_blank" style="text-decoration:none;color:white" rel="external nofollow noopener noreferrer"><span style="font-size:9px;word-break:normal;background-color:#e5e5e5;color:white;border-radius:10px;padding:1px">cs</span></a></td></tr></table></div>]]></content:encoded>
      
      <comments>https://invicr.github.io/2020/02/17/Java-ConcurrentModificationException/#disqus_thread</comments>
    </item>
    
    <item>
      <title>[Java] 배열에서 최소값, 최대값 찾기</title>
      <link>https://invicr.github.io/2020/02/16/Java-%EB%B0%B0%EC%97%B4%EC%97%90%EC%84%9C-%EC%B5%9C%EC%86%8C%EA%B0%92-%EC%B5%9C%EB%8C%80%EA%B0%92-%EC%B0%BE%EA%B8%B0/</link>
      <guid>https://invicr.github.io/2020/02/16/Java-%EB%B0%B0%EC%97%B4%EC%97%90%EC%84%9C-%EC%B5%9C%EC%86%8C%EA%B0%92-%EC%B5%9C%EB%8C%80%EA%B0%92-%EC%B0%BE%EA%B8%B0/</guid>
      <pubDate>Sun, 16 Feb 2020 14:22:25 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;배열의 첫 번째 원소를 min과 max로 지정한다.&lt;br&gt;배열의 크기 만큼 for loop를 돌면서 초기 min, max 값과 비교하면서&lt;br&gt;현재 min보다 작은 값이면 min에 저장하고, 현재 max 값보다 크면 max 에 저장한다.&lt;/p&gt;

        
      
      </description>
      
      <content:encoded><![CDATA[<p>배열의 첫 번째 원소를 min과 max로 지정한다.<br>배열의 크기 만큼 for loop를 돌면서 초기 min, max 값과 비교하면서<br>현재 min보다 작은 값이면 min에 저장하고, 현재 max 값보다 크면 max 에 저장한다.</p><div class="colorscripter-code" style="font-size: 12px;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important;overflow:auto"><table class="colorscripter-code-table" style="margin:0;padding:0;border:none;background-color:#fafafa;border-radius:4px;" cellspacing="0" cellpadding="0"><tr><td style="padding:6px;border-right:2px solid #e5e5e5"><div style="margin:0;padding:0;word-break:normal;text-align:right;color:#666;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%"><div style="line-height:130%">1</div><div style="line-height:130%">2</div><div style="line-height:130%">3</div><div style="line-height:130%">4</div><div style="line-height:130%">5</div><div style="line-height:130%">6</div><div style="line-height:130%">7</div><div style="line-height:130%">8</div><div style="line-height:130%">9</div><div style="line-height:130%">10</div><div style="line-height:130%">11</div><div style="line-height:130%">12</div><div style="line-height:130%">13</div><div style="line-height:130%">14</div><div style="line-height:130%">15</div><div style="line-height:130%">16</div><div style="line-height:130%">17</div><div style="line-height:130%">18</div><div style="line-height:130%">19</div><div style="line-height:130%">20</div><div style="line-height:130%">21</div></div></td><td style="padding:6px 0;text-align:left"><div style="margin:0;padding:0;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%"><div style="padding:0 6px; white-space:pre; line-height:130%"><span style="color:#a71d5d">public</span>&nbsp;<span style="color:#a71d5d">class</span>&nbsp;Main&nbsp;{</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#a71d5d">public</span>&nbsp;<span style="color:#a71d5d">static</span>&nbsp;<span style="color:#a71d5d">void</span>&nbsp;main(<span style="color:#066de2">String</span>[]&nbsp;args)&nbsp;{</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#999999">//Integer&nbsp;[]&nbsp;arr&nbsp;=&nbsp;{1,2,3,4,5,6,7,8,9,10};</span></div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#999999">//Integer&nbsp;[]&nbsp;arr&nbsp;=&nbsp;{5,2,9,1,4};</span></div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Integer&nbsp;[]&nbsp;arr&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">=</span>&nbsp;{<span style="color:#0099cc">1</span>,<span style="color:#0099cc">9</span>,<span style="color:#0099cc">4</span>,<span style="color:#0099cc">2</span>,<span style="color:#0099cc">7</span>,<span style="color:#0099cc">5</span>,<span style="color:#0099cc">4</span>};</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#066de2">int</span>&nbsp;min&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">=</span>&nbsp;arr[<span style="color:#0099cc">0</span>];</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#066de2">int</span>&nbsp;max&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">=</span>&nbsp;arr[<span style="color:#0099cc">0</span>];</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#a71d5d">for</span>&nbsp;(<span style="color:#066de2">int</span>&nbsp;i<span style="color:#0086b3"></span><span style="color:#a71d5d">=</span><span style="color:#0099cc">0</span>;&nbsp;i<span style="color:#0086b3"></span><span style="color:#a71d5d">&lt;</span>arr.<span style="color:#066de2">length</span>;&nbsp;i<span style="color:#0086b3"></span><span style="color:#a71d5d">+</span><span style="color:#0086b3"></span><span style="color:#a71d5d">+</span>){</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#a71d5d">if</span>(min&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">&gt;</span>&nbsp;arr[i]){</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">=</span>&nbsp;arr[i];</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#a71d5d">if</span>(max&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">&lt;</span>&nbsp;arr[i])&nbsp;{</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">=</span>&nbsp;arr[i];</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#999999">//min&nbsp;:&nbsp;1,&nbsp;max&nbsp;:&nbsp;9</span></div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#066de2">System</span>.<span style="color:#066de2">out</span>.<span style="color:#066de2">println</span>(<span style="color:#63a35c">"min&nbsp;:&nbsp;"</span><span style="color:#0086b3"></span><span style="color:#a71d5d">+</span>min<span style="color:#0086b3"></span><span style="color:#a71d5d">+</span><span style="color:#63a35c">",&nbsp;max&nbsp;:&nbsp;"</span><span style="color:#0086b3"></span><span style="color:#a71d5d">+</span>max);</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;}</div><div style="padding:0 6px; white-space:pre; line-height:130%">}</div></div></td></tr></table></div>]]></content:encoded>
      
      <comments>https://invicr.github.io/2020/02/16/Java-%EB%B0%B0%EC%97%B4%EC%97%90%EC%84%9C-%EC%B5%9C%EC%86%8C%EA%B0%92-%EC%B5%9C%EB%8C%80%EA%B0%92-%EC%B0%BE%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>배열 역순으로 출력하기</title>
      <link>https://invicr.github.io/2020/02/11/%EB%B0%B0%EC%97%B4-%EC%97%AD%EC%88%9C%EC%9C%BC%EB%A1%9C-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0/</link>
      <guid>https://invicr.github.io/2020/02/11/%EB%B0%B0%EC%97%B4-%EC%97%AD%EC%88%9C%EC%9C%BC%EB%A1%9C-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Tue, 11 Feb 2020 12:27:49 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Collections의 &lt;code&gt;reverse&lt;/code&gt;함수를 사용하기 위하여 배열을 List로 변환하는 방법을 사용하였다.&lt;/p&gt;
&lt;div class=&quot;colorscripter-code&quot; style=&quot;font-size: 12px;color:
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Collections의 <code>reverse</code>함수를 사용하기 위하여 배열을 List로 변환하는 방법을 사용하였다.</p><div class="colorscripter-code" style="font-size: 12px;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important;overflow:auto"><table class="colorscripter-code-table" style="margin:0;padding:0;border:none;background-color:#fafafa;border-radius:4px;" cellspacing="0" cellpadding="0"><tr><td style="padding:6px;border-right:2px solid #e5e5e5"><div style="margin:0;padding:0;word-break:normal;text-align:right;color:#666;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%"><div style="line-height:130%">1</div><div style="line-height:130%">2</div><div style="line-height:130%">3</div><div style="line-height:130%">4</div><div style="line-height:130%">5</div><div style="line-height:130%">6</div><div style="line-height:130%">7</div><div style="line-height:130%">8</div><div style="line-height:130%">9</div><div style="line-height:130%">10</div><div style="line-height:130%">11</div><div style="line-height:130%">12</div><div style="line-height:130%">13</div><div style="line-height:130%">14</div><div style="line-height:130%">15</div><div style="line-height:130%">16</div><div style="line-height:130%">17</div><div style="line-height:130%">18</div><div style="line-height:130%">19</div></div></td><td style="padding:6px 0;text-align:left"><div style="margin:0;padding:0;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%"><div style="padding:0 6px; white-space:pre; line-height:130%"><span style="color:#a71d5d">import</span>&nbsp;java.util.Arrays;</div><div style="padding:0 6px; white-space:pre; line-height:130%"><span style="color:#a71d5d">import</span>&nbsp;java.util.Collections;</div><div style="padding:0 6px; white-space:pre; line-height:130%"><span style="color:#a71d5d">import</span>&nbsp;java.util.List;</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;</div><div style="padding:0 6px; white-space:pre; line-height:130%"><span style="color:#a71d5d">public</span>&nbsp;<span style="color:#a71d5d">class</span>&nbsp;Main&nbsp;{</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#a71d5d">public</span>&nbsp;<span style="color:#a71d5d">static</span>&nbsp;<span style="color:#a71d5d">void</span>&nbsp;main(<span style="color:#066de2">String</span>[]&nbsp;args)&nbsp;{</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#066de2">String</span>[]&nbsp;arr&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">=</span>&nbsp;{<span style="color:#63a35c">"1"</span>,&nbsp;<span style="color:#63a35c">"2"</span>,&nbsp;<span style="color:#63a35c">"3"</span>,&nbsp;<span style="color:#63a35c">"4"</span>,&nbsp;<span style="color:#63a35c">"5"</span>};</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#999999">//&nbsp;[1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5]</span></div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#066de2">System</span>.<span style="color:#066de2">out</span>.<span style="color:#066de2">println</span>(Arrays.<span style="color:#066de2">toString</span>(arr));</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#999999">//&nbsp;Arrays.asList는&nbsp;배열을&nbsp;리스트로&nbsp;반환해&nbsp;준다.</span></div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List<span style="color:#0086b3"></span><span style="color:#a71d5d">&lt;</span><span style="color:#066de2">String</span><span style="color:#a71d5d">&gt;</span>&nbsp;list&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">=</span>&nbsp;Arrays.asList(arr);</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#999999">//&nbsp;리스트의&nbsp;구성을&nbsp;반대로&nbsp;뒤집는다.</span></div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collections.reverse(list);</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#999999">//&nbsp;리스트를&nbsp;배열로&nbsp;변환한다.</span></div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">=</span>&nbsp;list.toArray(<span style="color:#a71d5d">new</span>&nbsp;<span style="color:#066de2">String</span>[list.size()]);</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#999999">//&nbsp;[5,&nbsp;4,&nbsp;3,&nbsp;2,&nbsp;1]</span></div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#066de2">System</span>.<span style="color:#066de2">out</span>.<span style="color:#066de2">println</span>(Arrays.<span style="color:#066de2">toString</span>(arr));</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;}</div><div style="padding:0 6px; white-space:pre; line-height:130%">}</div></div><div style="text-align:right;margin-top:-13px;margin-right:5px;font-size:9px;font-style:italic"><a href="http://colorscripter.com/info#e" target="_blank" style="color:#e5e5e5text-decoration:none" rel="external nofollow noopener noreferrer">Colored by Color Scripter</a></div></td><td style="vertical-align:bottom;padding:0 2px 4px 0"><a href="http://colorscripter.com/info#e" target="_blank" style="text-decoration:none;color:white" rel="external nofollow noopener noreferrer"><span style="font-size:9px;word-break:normal;background-color:#e5e5e5;color:white;border-radius:10px;padding:1px">cs</span></a></td></tr></table></div>]]></content:encoded>
      
      <comments>https://invicr.github.io/2020/02/11/%EB%B0%B0%EC%97%B4-%EC%97%AD%EC%88%9C%EC%9C%BC%EB%A1%9C-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>문자열 거꾸로 출력하기</title>
      <link>https://invicr.github.io/2020/02/10/%EB%AC%B8%EC%9E%90%EC%97%B4-%EA%B1%B0%EA%BE%B8%EB%A1%9C-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0/</link>
      <guid>https://invicr.github.io/2020/02/10/%EB%AC%B8%EC%9E%90%EC%97%B4-%EA%B1%B0%EA%BE%B8%EB%A1%9C-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Mon, 10 Feb 2020 13:52:59 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;StringBuffer의 &lt;code&gt;reverse()&lt;/code&gt; 함수를 이용하면 쉽게 문자열을 순서를 뒤집어 출력할 수 있다.&lt;/p&gt;
&lt;hr&gt;
&lt;div class=&quot;colorscripter-code&quot; style=&quot;font-size: 12px;c
        
      
      </description>
      
      <content:encoded><![CDATA[<p>StringBuffer의 <code>reverse()</code> 함수를 이용하면 쉽게 문자열을 순서를 뒤집어 출력할 수 있다.</p><hr><div class="colorscripter-code" style="font-size: 12px;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important;overflow:auto"><table class="colorscripter-code-table" style="margin:0;padding:0;border:none;background-color:#fafafa;border-radius:4px;" cellspacing="0" cellpadding="0"><tr><td style="padding:6px;border-right:2px solid #e5e5e5"><div style="margin:0;padding:0;word-break:normal;text-align:right;color:#666;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%"><div style="line-height:130%">1</div><div style="line-height:130%">2</div><div style="line-height:130%">3</div><div style="line-height:130%">4</div><div style="line-height:130%">5</div><div style="line-height:130%">6</div><div style="line-height:130%">7</div><div style="line-height:130%">8</div><div style="line-height:130%">9</div><div style="line-height:130%">10</div><div style="line-height:130%">11</div></div></td><td style="padding:6px 0;text-align:left"><div style="margin:0;padding:0;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%"><div style="padding:0 6px; white-space:pre; line-height:130%"><span style="color:#a71d5d">public</span>&nbsp;<span style="color:#a71d5d">class</span>&nbsp;Main&nbsp;{</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#a71d5d">public</span>&nbsp;<span style="color:#a71d5d">static</span>&nbsp;<span style="color:#a71d5d">void</span>&nbsp;main(<span style="color:#066de2">String</span>[]&nbsp;args)&nbsp;{</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#066de2">String</span>&nbsp;str&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">=</span>&nbsp;<span style="color:#63a35c">"Hello,&nbsp;world!"</span>;</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#999999">//Hello,&nbsp;world!</span></div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#066de2">System</span>.<span style="color:#066de2">out</span>.<span style="color:#066de2">println</span>(str);</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringBuffer&nbsp;strb&nbsp;<span style="color:#0086b3"></span><span style="color:#a71d5d">=</span>&nbsp;<span style="color:#a71d5d">new</span>&nbsp;StringBuffer(str);</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#999999">//!dlrow&nbsp;,olleH</span></div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#066de2">System</span>.<span style="color:#066de2">out</span>.<span style="color:#066de2">println</span>(strb.reverse().<span style="color:#066de2">toString</span>());</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;&nbsp;&nbsp;&nbsp;}</div><div style="padding:0 6px; white-space:pre; line-height:130%">}</div><div style="padding:0 6px; white-space:pre; line-height:130%">&nbsp;</div></div><div style="text-align:right;margin-top:-13px;margin-right:5px;font-size:9px;font-style:italic"><a href="http://colorscripter.com/info#e" target="_blank" style="color:#e5e5e5text-decoration:none" rel="external nofollow noopener noreferrer">Colored by Color Scripter</a></div></td><td style="vertical-align:bottom;padding:0 2px 4px 0"><a href="http://colorscripter.com/info#e" target="_blank" style="text-decoration:none;color:white" rel="external nofollow noopener noreferrer"><span style="font-size:9px;word-break:normal;background-color:#e5e5e5;color:white;border-radius:10px;padding:1px">cs</span></a></td></tr></table></div>]]></content:encoded>
      
      <comments>https://invicr.github.io/2020/02/10/%EB%AC%B8%EC%9E%90%EC%97%B4-%EA%B1%B0%EA%BE%B8%EB%A1%9C-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>chrome 테마 Momentum 적용</title>
      <link>https://invicr.github.io/2019/08/03/chrome-%ED%85%8C%EB%A7%88-Momentum/</link>
      <guid>https://invicr.github.io/2019/08/03/chrome-%ED%85%8C%EB%A7%88-Momentum/</guid>
      <pubDate>Sat, 03 Aug 2019 13:13:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Chrome에-시계-테마-Momentum-적용-해보기&quot;&gt;&lt;a href=&quot;#Chrome에-시계-테마-Momentum-적용-해보기&quot; class=&quot;headerlink&quot; title=&quot;Chrome에 시계 테마 Momentum 적용 해보기&quot;&gt;&lt;/a
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Chrome에-시계-테마-Momentum-적용-해보기"><a href="#Chrome에-시계-테마-Momentum-적용-해보기" class="headerlink" title="Chrome에 시계 테마 Momentum 적용 해보기"></a>Chrome에 시계 테마 Momentum 적용 해보기</h2><hr><p>Momentum은 새 탭이 띄워졌을 때 멋진 풍경과 시간, 지역 온도 등을 표시해주는 무료 테마입니다.<br>(유료로 제공하는 기능도 있습니다.)</p><p>Momentum은 아래 링크를 통해 크롬 확장 프로그램으로 설치 할 수 있습니다.</p><p><a href="https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca?hl=ko" rel="external nofollow noopener noreferrer" target="_blank">Momentum Chrome 웹 스토어</a></p><ol><li>크롬 웹스토어에 접속하여 <code>Chrome에 추가</code> 버튼을 선택합니다.</li></ol><p><img src="momentum1.png" alt>  </p><ol start="2"><li>설치가 완료되고 새 탭이 열리면 아래와 같은 화면이 나옵니다. 이름을 입력해주세요.</li></ol><p><img src="momentum2.png" alt>  </p><ol start="3"><li>입력된 이름이 설정되었고, 설치가 완료 되었습니다.</li></ol><p><img src="momentum3.png" alt>  </p><p>이로써 설치는 완료 되었습니다! 배경은 랜덤으로 바뀌게 됩니다.</p>]]></content:encoded>
      
      <comments>https://invicr.github.io/2019/08/03/chrome-%ED%85%8C%EB%A7%88-Momentum/#disqus_thread</comments>
    </item>
    
    <item>
      <title>git clone develop 선택하기</title>
      <link>https://invicr.github.io/2019/08/01/git-clone-develop-%EC%84%A0%ED%83%9D%ED%95%98%EA%B8%B0/</link>
      <guid>https://invicr.github.io/2019/08/01/git-clone-develop-%EC%84%A0%ED%83%9D%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Thu, 01 Aug 2019 12:04:31 GMT</pubDate>
      <description>
      
        
        
          &lt;h2&gt;git에서 특정 branch 선택하여 clone 하기&lt;/h2&gt;
&lt;hr&gt;

&lt;blockquote&gt;
&lt;p&gt;사용법&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
        
      
      </description>
      
      <content:encoded><![CDATA[<h2>git에서 특정 branch 선택하여 clone 하기</h2><hr><blockquote><p>사용법</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b &lt;branch&gt; &lt;remote_repo&gt;</span><br></pre></td></tr></table></figure><blockquote><p>예제</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b develop git@github.com:username/folder.git</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://invicr.github.io/2019/08/01/git-clone-develop-%EC%84%A0%ED%83%9D%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
